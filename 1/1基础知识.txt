index  count  replace split startswith  endswith upper lower isalpha isdigit title isalnum

列表中最大值：
max(list)

python中的内置函数：
max()
min()
del()
len()
sum()
用于任何数据类型

原样输出：print 
单行注释：
#注释内容     快捷键： ctrl+/
多行注释：
"""注释内容"""   也可以用单引号   '''注释内容'''
print(type(a))输出a的类型
输入函数
a=input("提示内容")  赋给a值  是字符串  用强制转换将a变成其他类型 如：int(a) 变成整型
%d 整型
%f  浮点型
%s 字符串型
%c 字符型
a=[3,1,2,5,4]
a.sort(reverse=True)
print(a)  倒序

字符串：str
数字类型：整型 int 浮点型 float
布尔类型：1=true 0=false
列表：list  =[1,2,3]
元祖：tuple= (1,2)
字典：dict ={"name":"123","age":18}
集合：set = {1,2,3,4}
if 条件一:
   print()
elif 条件二：
  print()
else :
  print()

name="abcdef"
输出下标为0  print(name[0])

切片： 范围是左闭右开！！！
print(name[0:3])    结果：abc
print(name[0:5:2]  结果：ace
print(name[0:-1:2]  结果：ace
print(name[5:0:-2] 结果：fdb
print(name[5:0:-1] 结果:fedcb
print(name[:3] 结果：abc

字符串的常见操作：
my="hello world hello python"
1、find():检测字符串里是否包含你要查询的字符串
例如：
print(my.find("python"))
如果存在返回开始的索引值（也就是下标）
不存在返回值为-1

2、index():检测你设定的字符串长度里是否存在你要查询的字符串
例如：
print(my.index("py",0,25))
如果存在返回开始的索引值，否则报错，index里的第一个数字参数是起始，后一个是终止的索引值-1

3、count:查询出现的次数
a=lend("123")  a的值为该字符串的长度 a=3
print(my.count("l"))
结果为5
my_str.count(str, 0, len(mystr))

4、replace() 替换
my_str.replace("l","r",2)  将l替换为r 两次

5、split() 切片
以str为分隔符切片mystr,如果maxsplit有指定值，则仅分割maxsplit个字符串
格式：my_str.split(str=" ",2)
my_str.split(" ")  以空格为切片条件
结果为：['hello','world','hello','python']为列表结构
str="qaqwrwrwee"
print(str.split("w",2))
结果为：['qaq','r','rwee'] 2表示切两次  以w为切点  结果没有切点

6、startswith()
检查字符串是否以( )开头 是返回True 不是返回False
my_str.startswith("hello") 结果为：True 

7、endswith() 查询是否以什么什么结尾

4、upper()：转换my中的小写字母为大写
print(my.upper())

5、lower():转换my中的大写字符为小写
print(my.lower())

6、title():把字符串的每个单词首字母大写
print(my.title())

7、capitalize():把字符串的第一个字符大写
print(my.capitalize())

8、splitlines():按照行分隔，返回一个包含各行作为元素的列表
例如：
my_name="hello\nworld"
print(my_name) 
 结果为：
hello
world
print(my_name.spiltlines())
结果为：
["hello","world"]

9、isalpha():如果my所有字符都是字母 则返回True,否则返回False
print(my.isalpha())
结果为：True

10、isdigit()：如果my只包含数字则返回True 否则返回False
print(my.isdigit())
结果为：False

11、isalnum():如果my所有字符都是字母或数字则返回True,否则返回False
print(my.isalnum())
结果为True

12、isspace():如果my中只包含空格，则返回True,否则返回False
print(my.isspace())
结果为：False

13、rfind()
从右往左找你要查找的字符串  找到后返回下标值
a=rfind('.')  用来取文件的后缀名

14、join
用来将列表里的元素连接变为字符串
一行代码实现九九乘法表
print('.'.join([1,2]))
结果为'1.2'


列表：
增加（append,extend,insert）
append:
A=[1,2,3]
A.append("4")
结果为：A=[1,2,3,"4"]

extend:
a=[1,2]  b=[3,4]
a.extend(b)
结果为 a=[1,2,3,4]
a.append(b)
结果为 a=[1,2,[3,4]]

insert:
a=[0,1,2]
a.insert(1,3)
结果为 a=[0,3,1,2]

修改元素：
a=[1,2,3]
a[0]=3
结果为：a=[3,2,3]

查找元素：
1、in判断存在
name="123456789"
find="123"
if find in name:
   print("存在")
else:
  print("不存在")
2、not in判断不存在

3、index和count和在字符串里的应用一样

删除元素：
list=[1,2,3]
1、del list[1]
2、list.pop()删除最后一个元素
3、list.remove(1)

排序
list.sort()  从小到大排序
list.sort(reverse=Ture)从大到小排序
list.reverse()反转

列表的嵌套
list=[1,[2,3],4]
list[1].insert(1,5)结果为list[1,[2,5,3],4]

字典：
字典的每个元素由2部分组成，键:值。例如 'name':'班长' ,'name'为键，'班长'为值
info={"name":'师玲珑',"age":18}
print(info["name"])  结果为：师玲珑

修改数据：
info["age"]=20

删除数据
del info["age"]

info.clear()删除所有数据

如果info中不存在'age'这个键，我就让他返回默认值18
age=info.get('age',18)
print(age)

len()测量字典中，键值对的个数
print(info.keys()) 返回一个包含字典所有的key列表  
结果为：info_keys(['name','age','sex'])

print(info.values()) 返回一个包含字典所有的value列表  
结果为：info_values([18,20,'女'])

print(info.items()) 返回一个包含字典所有的键值对列表  
结果为：info_values([('name','age','sex'),(18,20,'女')])

遍历字典的key   210 480  690
for key in info.keys():
      print(key)

遍历字典的values
for value in info.values():
     print(value)                    

遍历字典的items
for item in info.items():
    print(item)
或者
for key,value in info.items()
     print(key,value)

如何实现带下标的遍历
chars=[1,2,3,4]
for i,chr in enumerate(chars):
     print(i,chr)
结果为：
0 1
1 2 
2 3 
3 4

――――――――――――――――――――――――――----――――――――――――――――――――――――――――――――――――――――――――――
集合：
集合是无序的，集合中的元素是唯一的，集合一般用于元组或者列表中的元素去重。

添加元素
add:
set1={1,2,3}
set1.add(8) 
print(set1)
结果为 1,2,3,8

update:
set1={1,2,3}
set1.update("abcd")
print(set1)
结果为：1,2,3,a,b,c,d

删除元素
set1.remove(1)如果没有报错

set1.discard(1) 如果没有不执行

set1.pop()是随机删除集合中的元素

交集：
set1={1,2,3}
set2={3,4}
new_set=set1&set2
print(new_set) 结果为{3}

并集：
new_set=set1|set2 
print(new_set) 结果为{1,2,3,4}

――――――――――――――――――――――――――----――――――――――――――――――――――――――――――――――――――――――――――
公共方法：
运算符     python表达式      结果           描述                    支持的数据类型
+              [1,2]+[3,4]       [1,2,3,4]         合并                    字符串.列表.元祖      
*               [1]*4               [1,1,1,1]          复制	                   字符串.列表.元祖
in             3 in (1,2,3)          True         元素是否存在         同上+字典
not in     4 not in(1,2,3)        True         元素是否不存在     同上







